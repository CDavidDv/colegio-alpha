---
// Componente Contacto para Colegio Alpha
---
<section id="contacto" class="py-16 bg-gradient-to-br from-blue-50 to-green-50">
  <div class="max-w-4xl mx-auto px-4">
    <div class="text-center mb-12">
      <h2 class="text-3xl md:text-4xl font-bold text-[var(--steam-azul-oscuro)] mb-6">CONTACTO</h2>
      <p class="text-lg text-gray-700 mb-4">Estamos aquí para ayudarte. Escríbenos y con gusto te atenderemos personalmente.</p>
      <p class="text-sm text-gray-600">También puedes contactarnos directamente:</p>
      <div class="flex flex-col sm:flex-row justify-center items-center gap-4 mt-4">
        <div class="flex items-center gap-2">
          <svg class="w-5 h-5 text-[var(--color-logo-azul)]" fill="currentColor" viewBox="0 0 20 20">
            <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"/>
            <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"/>
          </svg>
          <span class="text-sm font-medium">info@colegioalpha.edu.mx</span>
        </div>
        <div class="flex items-center gap-2">
          <svg class="w-5 h-5 text-[var(--color-logo-azul)]" fill="currentColor" viewBox="0 0 20 20">
            <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z"/>
          </svg>
          <span class="text-sm font-medium">(771) 123-4567</span>
        </div>
      </div>
    </div>
    
    <div class="bg-white rounded-2xl shadow-xl p-8">
      <form id="contactForm" class="grid grid-cols-1 md:grid-cols-2 gap-6" novalidate>
        <!-- Nombre -->
        <div class="md:col-span-1">
          <label for="nombre" class="block text-sm font-medium text-gray-700 mb-2">Nombre completo *</label>
          <input 
            type="text" 
            id="nombre"
            name="nombre"
            placeholder="Tu nombre completo" 
            class="w-full p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-[var(--color-logo-verde)] focus:border-transparent transition-all duration-200" 
            required 
          />
          <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
        </div>
        
        <!-- Email -->
        <div class="md:col-span-1">
          <label for="email" class="block text-sm font-medium text-gray-700 mb-2">Correo electrónico *</label>
          <input 
            type="email" 
            id="email"
            name="email"
            placeholder="tu@email.com" 
            class="w-full p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-[var(--color-logo-verde)] focus:border-transparent transition-all duration-200" 
            required 
          />
          <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
        </div>
        
        <!-- Teléfono -->
        <div class="md:col-span-1">
          <label for="telefono" class="block text-sm font-medium text-gray-700 mb-2">Teléfono *</label>
          <input 
            type="tel" 
            id="telefono"
            name="telefono"
            placeholder="(771) 123-4567" 
            class="w-full p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-[var(--color-logo-verde)] focus:border-transparent transition-all duration-200" 
            required 
          />
          <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
        </div>
        
        <!-- Nivel de interés -->
        <div class="md:col-span-1">
          <label for="nivel" class="block text-sm font-medium text-gray-700 mb-2">Nivel de interés *</label>
          <select 
            id="nivel"
            name="nivel"
            class="w-full p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-[var(--color-logo-verde)] focus:border-transparent transition-all duration-200" 
            required
          >
            <option value="">Selecciona un nivel</option>
            <option value="primaria">Primaria</option>
            <option value="secundaria">Secundaria</option>
            <option value="ambos">Ambos niveles</option>
            <option value="informacion">Solo información</option>
          </select>
          <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
        </div>
        
        <!-- Mensaje -->
        <div class="md:col-span-2">
          <label for="mensaje" class="block text-sm font-medium text-gray-700 mb-2">Mensaje *</label>
          <textarea 
            id="mensaje"
            name="mensaje"
            placeholder="¿En qué podemos ayudarte? Cuéntanos sobre tus necesidades..." 
            class="w-full p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-[var(--color-logo-verde)] focus:border-transparent transition-all duration-200 resize-none" 
            rows="5" 
            required
          ></textarea>
          <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
        </div>
        
        <!-- Botón de envío -->
        <div class="md:col-span-2">
          <button 
            type="submit" 
            id="submitBtn"
            class="w-full bg-[var(--color-logo-azul)] text-white px-8 py-4 rounded-lg font-bold text-lg shadow-lg hover:bg-[var(--color-logo-verde)] hover:text-white transition-all duration-300 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
          >
            <span class="flex items-center justify-center gap-2">
              <svg id="sendIcon" class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"/>
              </svg>
              <span id="submitText">Enviar mensaje</span>
            </span>
            <svg id="loadingIcon" class="hidden w-5 h-5 animate-spin" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
          </button>
        </div>
      </form>
      
      <!-- Mensaje de éxito -->
      <div id="successMessage" class="hidden mt-6 p-4 bg-green-50 border border-green-200 rounded-lg">
        <div class="flex items-center gap-3">
          <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
          </svg>
          <div>
            <h3 class="text-lg font-semibold text-green-800">¡Mensaje enviado con éxito!</h3>
            <p class="text-green-700">Gracias por contactarnos. Te responderemos en breve.</p>
          </div>
        </div>
      </div>
      
      <!-- Mensaje de error -->
      <div id="errorMessage" class="hidden mt-6 p-4 bg-red-50 border border-red-200 rounded-lg">
        <div class="flex items-center gap-3">
          <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
          </svg>
          <div>
            <h3 class="text-lg font-semibold text-red-800">Error al enviar mensaje</h3>
            <p class="text-red-700">Hubo un problema al enviar tu mensaje. Por favor, intenta nuevamente.</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('contactForm') as HTMLFormElement;
    const submitBtn = document.getElementById('submitBtn') as HTMLButtonElement;
    const submitText = document.getElementById('submitText');
    const sendIcon = document.getElementById('sendIcon');
    const loadingIcon = document.getElementById('loadingIcon');
    const successMessage = document.getElementById('successMessage');
    const errorMessage = document.getElementById('errorMessage');
    
    // Verificar que todos los elementos existen
    if (!form || !submitBtn || !submitText || !sendIcon || !loadingIcon || !successMessage || !errorMessage) {
      console.error('No se pudieron encontrar todos los elementos del formulario');
      return;
    }
    
    // Función para mostrar errores de validación
    function showError(input: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement, message: string) {
      const errorDiv = input.parentNode?.querySelector('.error-message') as HTMLElement;
      if (errorDiv) {
        errorDiv.textContent = message;
        errorDiv.classList.remove('hidden');
        input.classList.add('border-red-500');
      }
    }
    
    // Función para ocultar errores de validación
    function hideError(input: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement) {
      const errorDiv = input.parentNode?.querySelector('.error-message') as HTMLElement;
      if (errorDiv) {
        errorDiv.classList.add('hidden');
        input.classList.remove('border-red-500');
      }
    }
    
    // Función para validar email
    function isValidEmail(email: string): boolean {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    }
    
    // Función para validar teléfono
    function isValidPhone(phone: string): boolean {
      const phoneRegex = /^[\+]?[1-9][\d]{0,15}$/;
      return phoneRegex.test(phone.replace(/\s/g, ''));
    }
    
    // Validación en tiempo real
    const inputs = form.querySelectorAll('input, select, textarea') as NodeListOf<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>;
    inputs.forEach(input => {
      input.addEventListener('blur', function() {
        validateField(this);
      });
      
      input.addEventListener('input', function() {
        if (this.classList.contains('border-red-500')) {
          validateField(this);
        }
      });
    });
    
    function validateField(field: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement): boolean {
      const value = field.value.trim();
      
      if (field.hasAttribute('required') && !value) {
        showError(field, 'Este campo es obligatorio');
        return false;
      }
      
      if (field.type === 'email' && value && !isValidEmail(value)) {
        showError(field, 'Ingresa un email válido');
        return false;
      }
      
      if (field.type === 'tel' && value && !isValidPhone(value)) {
        showError(field, 'Ingresa un teléfono válido');
        return false;
      }
      
      hideError(field);
      return true;
    }
    
    // Manejo del envío del formulario
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      // Validar todos los campos
      let isValid = true;
      inputs.forEach(input => {
        if (!validateField(input)) {
          isValid = false;
        }
      });
      
      if (!isValid) {
        return;
      }
      
      // Mostrar estado de carga
      submitBtn.disabled = true;
      if (submitText) submitText.textContent = 'Enviando...';
      if (sendIcon) sendIcon.classList.add('hidden');
      if (loadingIcon) loadingIcon.classList.remove('hidden');
      
      // Ocultar mensajes previos
      if (successMessage) successMessage.classList.add('hidden');
      if (errorMessage) errorMessage.classList.add('hidden');
      
      try {
        // Recopilar datos del formulario
        const formData = new FormData(form);
        const data = Object.fromEntries(formData);
        
        // Aquí puedes integrar con tu servicio de email preferido
        // Por ejemplo, usando EmailJS, Formspree, o tu propio backend
        
        // Simulación de envío (reemplaza con tu implementación real)
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Mostrar mensaje de éxito
        if (successMessage) successMessage.classList.remove('hidden');
        form.reset();
        
        // Scroll al mensaje de éxito
        if (successMessage) successMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
        
      } catch (error) {
        console.error('Error al enviar formulario:', error);
        if (errorMessage) errorMessage.classList.remove('hidden');
        if (errorMessage) errorMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
      } finally {
        // Restaurar estado del botón
        submitBtn.disabled = false;
        if (submitText) submitText.textContent = 'Enviar mensaje';
        if (sendIcon) sendIcon.classList.remove('hidden');
        if (loadingIcon) loadingIcon.classList.add('hidden');
      }
    });
  });
</script> 